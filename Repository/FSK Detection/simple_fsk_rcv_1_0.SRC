; Filename:	simple_fsk_rcv.src
; Author:	Chris Fogelklou
;		Applications Engineer
;		Scenix Semiconductor Inc.
; Revision:	1.0
; Date:		Dec. 17, 1998
; Part:		SX28AC rev. 2.5
; Freq:		50Mhz
; Compiled using Parallax SX-Key software v1.0
; Version:	1.0
; Program Description:	This is simple software to demonstrate the concept of 
;			converting an incoming frequency to a data train.  This 
;			program simply watches the incoming frequency and outputs
;			a high or a low to the RS-232 TX pin.  For this reason, the
;			PC that the board is connected to must be set to the desired
;			baud rate.  Example:  If a 300,N,8,1 settings are desired, 
;			simply set the PC's terminal program to these settings and
;			the SX modem will act as a simple frequency-voltage converter,
;			translating the incoming frequency (1300Hz and 2100Hz) to 
;			an output voltage which the computer will receive as a 300,N,8,1
;			data packet.  Once the modem is connected, simply press a key
;			on the keyboard to get it to pick up and begin receiving.
;
;
; Revision History:  	1.0 Drew out the FSK receive code from the rest of the code
;		 	surrounding it in the old modem demo software and implemented
;			it as a module by itself.
;
;*************************************************************
; Device
;*************************************************************
		device	pins28,pages4,banks8,oschs
		device	turbo,stackx,optionx
		id	'SFSKRX10'
		reset	reset_entry
		freq	50_000_000

;*************************************************************
; Watches
;*************************************************************

	watch	fsk_trans_count,8,udec	; counts the delay between transitions

;*************************************************************
; Macros
;*************************************************************
disable_o	macro	0		; This macro disables the output
		setb	in_out		; switch on the new modem boards.
		clr	flags
		endm

;*************************************************************
; Equates
;*************************************************************
glitch_th		equ	20	; The threshold which defines a glitch (small spike which should be ignored)
low_count_error_th	equ	40	; The lowest count allowed for a high frequency
low_high_th		equ	95	; The lowest count allowed for a low frequency
high_count_error_th	equ	140	; The highest count allowed for a low frequency

;*************************************************************
; Pin Definitions
;*************************************************************

rx_pin		equ	ra.1
tx_pin		equ	ra.2
in_out		equ	ra.3

led_pin		equ	rb.0
hook		equ	rb.4

;*************************************************************
; Global Variables
;*************************************************************
		org	$8		; Global registers

flags			ds	1
	fsk_rx_en	equ	flags.0 ; Enables the FSK receiver.

;*************************************************************
; Bank 1 Variables
;*************************************************************
		org	$10

fsk_receive_bank	=	$

	fsk_trans_count	ds	1		; This register counts the number of counts 
						; between transitions at the pin
	rb_past_state	ds	1		; This register keeps track of the previous 
						; state of port RB, to watch for transitions
		org	$0
;*************************************************************
interrupt
; Interrupt Service routine starts at location zero.
;*************************************************************
		jnb	fsk_rx_en,fsk_rx_out	; jump out if the FSK receiver is not enabled

		bank	fsk_receive_bank

		add	fsk_trans_count,#1	; Regardless of what is going on, increment the 
		snc				; transition timer.  These get cleared when a transition 
		jmp	:error			; takes place.

		cjb	fsk_trans_count,#low_high_th,:fsk_timer_out	; as soon as it takes longer than 95 counts
		setb	tx_pin						; to transition, this must be a low frequency
		clrb	LED_pin						; If a high is being sent, clear the LED
		
:fsk_timer_out

		mov	w,rb
		and	w,#%00000010		; get the current state of rb.
		xor	w,rb_past_state		; compare it with the previous state of the pin
		jz	fsk_rx_out		; if there was no change, then jump out, there is nothing to do.
		
						; Now it is time to determine if the transition that took place indicates a bit was received
						; (it must be within some thresholds... below 20, ignore it, below 40, what???,
						; below 95, high frequency, below 140, low frequency (already set), above 140,
						; what???)

		cjb	fsk_trans_count,#glitch_th,:glitch_so_ignore		; pulse was below specs, ignore it... probably noise
		cjb	fsk_trans_count,#low_count_error_th,:error		; pulse was not a glitch but wasn't long enough to mean anything... huh?
		cjb	fsk_trans_count,#low_high_th,:high_frequency		; pulse was within specs for a high frequency...
		cjb	fsk_trans_count,#high_count_error_th,:fsk_receive_done	; pulse was within specs for a low frequency (don't do anything)
		jmp	:error							; pulse was too long to mean anything, so do nothing.
		
:high_frequency						; a high frequency corresponds to low data.
		clrb	tx_pin
		setb	LED_pin				; set the LED to indicate a LOW is being sent.
		jmp	:fsk_receive_done

:error
;--------------- PUT ERROR HANDLING CODE IN HERE -----------------

:fsk_receive_done			
		clr	fsk_trans_count			; clear the bit counter.
:glitch_so_ignore					; don't clear the counter if the data was a glitch
		mov	w,rb				; save the new state of RB.
		and	w,#%00000010
		mov	rb_past_state,w
fsk_rx_out
;**************************************************************************
		mov	w,#-163		;1	; interrupt 163 cycles after this interrupt
		retiw			;3	; return from the interrupt
;**************************************************************************
; End of the Interrupt Service Routine
;**************************************************************************

;**************************************************************************
reset_entry
; Program Starts Here on Power Up
;**************************************************************************
		mov	m,#$0c	
		mov	!rb,#%11111101		; enable Schmidt trigger on rb1 (for FSK receive)

		mov	m,#$0f			
		mov	 ra,#%0110		; init ra
		mov	!ra,#%0010		; ra0-1 = input, ra2-3 = output
		mov	 rb,#%00000000		; init rb
		mov	!rb,#%11101110		; rb1 = FSK input, rb0 = output for LED,rb5 = hook
		clrb	hook			; go on hook.
		setb	led_pin			; turn on LED
		clr	flags			; Clear all flags

		disable_o			

		jb	rx_pin,$		; until the user presses a key, loop indefinetely

		setb	hook			; pick up the line
		setb	fsk_rx_en		; enable the FSK receiver

		mov	!option,#%00011111	; enable wreg and rtcc interrupt


main		jmp	$			; jump here forever (ISR does all the work)