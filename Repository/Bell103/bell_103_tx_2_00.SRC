;******************************************************************************
; Copyright © [01/25/1999] Scenix Semiconductor, Inc. All rights reserved.
;
 ;Scenix Semiconductor, Inc. assumes no responsibility or liability for
; the use of this [product, application, software, any of these products].
; Scenix Semiconductor conveys no license, implicitly or otherwise, under
; any intellectual property rights.
; Information contained in this publication regarding (e.g.: application,
; implementation) and the like is intended through suggestion only and may
; be superseded by updates. Scenix Semiconductor makes no representation
; or warranties with respect to the accuracy or use of these information,
; or infringement of patents arising from such use or otherwise.
;******************************************************************************
;
; Filename:	bell_103_tx_2_00.src
;
; Author:	Chris Fogelklou
;		Applications Engineer
;		Scenix Semiconductor Inc.
;
; Revision:	2.00
;
; Date:		May 5, 1999.
;
; Part:		SX28AC rev. 2.5
;
; Freq:		50Mhz
;
; Compiled using Parallax SX-Key software v1.0
;
; Program Description:	This simple program encodes an outgoing bell 103 signal.
;		It can encode the frequencies for either Answer mode or Originate
;		mode.  It also has a compact AT command set, for easy manipulation
;		from a terminal.  This program includes DTMF generation.
;
; Program Instructions;
;		To use this program, you must have be connected to a serial port at
;		these settings:
;			300 bps
;			No parity
;			8 Data Bits
;			1 stop bit
;			No hardware flow control
;
;		These AT commands can be used:
;
;			ATDT - Used to dial into a remote modem
;			ATA - Used to answer a call from a remote modem
;			ATH - Used to hang up a call
;			ATZ - Used to initialize the modem settings
;			ATO - Switches back to data mode from command mode
;			+++ - Switches from data mode to command mode.
;			?   - Re-prints the help screen to the terminal.
;
; Revision History:
;		2.00 Wrote new code which performs bell103 encode and DTMF encode
;		for originating as well as answering.
;
;	INPUTS:
;	Received RS-232 characters on rs-232 rx_pin (ra.1)
;	OUTPUTS:
;	Received RS-232 characters on tx_pin (ra.2)
;	FSK output on PWM_pin
;	LED flashes (rb.0)
;
;	RESOURCES:
;       Program memory: TBD
;       Data memory:	TBD
;       I/O Count:	TBD
;
;******************************************************************************
; Device Directives
;******************************************************************************
SX28L_compiler
IFDEF SX28L_compiler
		device	SX28L,oscxtmax,carryx		; 28-pin device, 4 pages, 8 banks of RAM
		device	turbo,stackx_optionx		; High speed oscillator, turbo mode,
							; option register extend, 8-level stack
ELSE
		device	pins28,pages4,banks8,carryx	; 28-pin device, 1 pages, 8 banks of RAM
		device	oschs,turbo,optionx,stackx	; High speed oscillator, turbo mode,
ENDIF							; option register extend, 8-level stack
		freq	50_000_000			; default run speed = 50MHz
		ID	'B103TX20'			; Version = 2.0

		reset	reset_entry			; JUMP to reset_entry label on reset


;******************************************************************************
; Watches (For Debug in SX_Key software V.1.0 +)
;******************************************************************************
watch	fsk_answering,1,ubin
watch	freq_acc_low,16,udec
watch	freq_count_low,16,udec
watch	sine_index,8,udec
watch	PWM0_out,8,udec
watch	freq_acc_high,16,uhex
watch	freq_count_high,8,uhex
watch	freq_count_low,8,uhex
watch	freq_count_high2,8,uhex
watch	freq_count_low2,8,uhex
watch	byte,1,fstr
watch	byte,8,udec
watch	curr_sine,8,sdec
watch	sine_index,8,sdec
watch	pwm0_out,8,udec
watch	pwm0_acc,8,udec
watch	timer_flag,1,ubin
watch	timer_l,16,uhex
watch	temp,8,uhex
watch	wreg,8,uhex


;**************************************************************************
; Equates for common data comm frequencies
;**************************************************************************
f697_h		equ	$012	; DTMF Frequency
f697_l		equ	$09d

f770_h		equ	$014	; DTMF Frequency
f770_l		equ	$090

f852_h		equ	$016	; DTMF Frequency
f852_l		equ	$0c0

f941_h		equ	$019	; DTMF Frequency
f941_l		equ	$021

f1209_h		equ	$020	; DTMF Frequency
f1209_l		equ	$049

f1336_h		equ	$023	; DTMF Frequency
f1336_l		equ	$0ad

f1477_h		equ	$027	; DTMF Frequency
f1477_l		equ	$071

f1633_h		equ	$02b	; DTMF Frequency
f1633_l		equ	$09c
;******************************************************************************
; Equates for FSK generation
;******************************************************************************
f2225_h		equ	$03b
f2225_l		equ	$06b

f2025_h		equ	$036
f2025_l		equ	$014

f1070_h		equ	$01c
f1070_l		equ	$093

f1270_h		equ	$021
f1270_l		equ	$0ea

f2100_h		equ	$038	; 2100Hz Signifies LOW data in Bell202 Spec
f2100_l		equ	$015

;**************************************************************************
; Equates for certain baud rates: 
;**************************************************************************
;baud_bit	=       4                       ;for 19200 baud
;start_delay	=       16+8+1                  ; "    "     "
;int_period	=       163                     ; "    "     "
; *** 2400 baud (for slower baud rates, increase the RTCC prescaler)
baud_bit	=       7                       ;for 2400 baud
start_delay	=       128+64+1                ; "    "    "
fsk_start_delay	=	128+96+1
int_period	=       163                     ; "    "    "
;******************************************************************************
; Pin Definitions (These definitions are for SX DTMF DEMO boards)
;******************************************************************************
	PWM_pin		equ	ra.0
	rx_pin		equ	ra.1		; RS-232 Input pin
	tx_pin		equ	ra.2		; RS-232 Output pin
					; and input on SX DTMF DEMO boards.
	led_pin		equ	rb.0		; Flashes while characters are
					; being received.
	cntrl_1		equ	rb.2
	cntrl_3		equ	rb.5
	hook		equ	rb.4		; Goes on/off-hook.
	test_pin	equ	rc.7
	gain_booster	equ	ra.3
;******************************************************************************
; Global Variables
;******************************************************************************
		org	$8		; Global registers

	flags	ds	1
		dtmf_gen_en	equ	flags.0	; Signifies whether or not DTMF output is enabled
		sine_gen_en	equ	flags.1
		timer_flag	equ	flags.2
		fsk_tx_en	equ	flags.3
		rx_flag		equ	flags.5
	temp		ds	1
	task_switcher	ds	1
	ascii_index	ds	1
	command_index	ds	1
;******************************************************************************
; Bank 0 Variables
;******************************************************************************
		org	$10

sine_gen_bank		=	$
	freq_acc_low		ds	1	; 16-bit accumulator which decides when to increment the sine wave
	freq_acc_high		ds	1	; 
	freq_count_low		ds	1	; 16-bit counter which decides which frequency for the sine wave
	freq_count_high		ds	1	; freq_count = Frequency * 6.83671552
	sine_index		ds	1
	sine_index2		ds	1	; The velocity of the sin wave
	freq_count_low2		ds	1	; 16-bit counter which decides which frequency for the sine wave
	freq_count_high2	ds	1	; freq_count = Frequency * 6.83671552
	freq_acc_high2		ds	1	; 
	freq_acc_low2		ds	1	; 16-bit accumulator which decides when to increment the sine wave
	curr_sine		ds	1	; The current value of the imitation sin wave
	curr_sine2		ds	1	; The current value of the imitation sin wave
	sine2_temp		ds	1	; This register is used to do a temporary shift/add register

PWM_bank		=	$

pwm0_acc		ds	1		; PWM accumulator
pwm0_out			ds	1		; current PWM output

;******************************************************************************
; Bank 1 Variables
;******************************************************************************
		org	$30
timers			=	$
	timer_l		ds	1
	timer_h		ds	1
	timer_hh	ds	1
serial		=       $                       ;UART bank

tx_high		ds      1                       ;hi byte to transmit
tx_low		ds      1                       ;low byte to transmit
tx_count	ds      1                       ;number of bits sent
tx_divide	ds      1                       ;xmit timing (/16) counter
rx_count	ds      1                       ;number of bits received
rx_divide	ds      1                       ;receive timing counter
rx_byte		ds      1                       ;buffer for incoming byte
rx_count2	ds      1                       ;number of bits received
rx_divide2	ds      1                       ;receive timing counter
rx_byte2	ds      1                       ;buffer for incoming byte
string		ds	1
byte		ds	1
plus_count	ds	1

;******************************************************************************
;	Bank 2 Variables
;******************************************************************************
		org     $50                     ;bank3 variables
fsk_transmit_bank	=	$
fsk_receive_bank	=	$

	fsk_flags		ds	1
	fsk_answering		equ	fsk_flags.0
	fsk_tx_bit		equ	fsk_flags.1
	fsk_rx_bit		equ	fsk_flags.2
fsk_receive_bank	=	$
;*************************************************************
; Bank 4, 5, 6, 7 (for ascii buffer, but can be reused.)
;*************************************************************
		org	$90
	ascii_buffer		=	$
		org	$b0
	ascii_buffer2		=	$
		org	$d0
	ascii_buffer3		=	$
		org	$f0
	ascii_buffer4		=	$

;************************ Beginning of program space ***************************
;******************************************************************************
; Interrupt
		org	$0			; The interrupt Service routine starts at location zero.
; 
; With a retiw value of -163 and an oscillator frequency of 50MHz, this
; code runs every 3.26us.
;******************************************************************************
PWM_output
		bank	PWM_bank		; Update the PWM pin
		clc
		add	PWM0_acc,PWM0_out
		snc
		setb	PWM_pin
		sc
		clrb	PWM_pin
;******************************************************************************
FSK_output
		jnb	dtmf_gen_en,:dtmf_disabled
		call	@sine_generator1
		call	@DTMF_twist
		jmp	:task_switcher
:dtmf_disabled
		jnb	sine_gen_en,:task_switcher ; Output the frequencies set by the freq_count registers
		call	@sine_generator2
		call	@SINE_out		   ; Output each discrete value of the sine table
:task_switcher
		inc	task_switcher
		mov	w,task_switcher
		and	w,#$07
		clc
		jmp	pc+w
		jmp	:fsk_receive	;0
		jmp	do_timers	;1
		jmp	do_timers	;2
		jmp	:fsk_transmit	;3

		jmp	do_timers	;4
		jmp	do_timers	;5
		jmp	:transmit	;6
		jmp	:receive	;7
:fsk_receive
		call	@fsk_receive
		jmp	do_timers

:fsk_transmit
		snb	fsk_tx_en
		call	@TRANSMIT_FSK		; into its corresponding frequencies
		jmp	do_timers
		
;**************************************************************************
:transmit
; This is an asynchronous RS-232 transmitter
; INPUTS:
;	tx_divide.baud_bit  -	Transmitter only executes when this bit is = 1
;	tx_high		    -	Part of the data to be transmitted
;	tx_low		    -	Some more of the data to be transmitted
;	tx_count	    -	Counter which counts the number of bits transmitted.
; OUTPUTS:
;	tx_pin		    -	Sets/Clears this pin to accomplish the transmission.
;**************************************************************************
		bank	serial
		clrb    tx_divide.baud_bit      ;clear xmit timing count flag
		inc     tx_divide               ;only execute the transmit routine
		STZ                             ;set zero flag for test
		SNB     tx_divide.baud_bit      ; every 2^baud_bit interrupt
		test    tx_count                ;are we sending?
		JZ      do_timers	        ;if not, go to :receive
		clc                             ;yes, ready stop bit
		rr      tx_high                 ; and shift to next bit
		rr      tx_low                  ;
		dec     tx_count                ;decrement bit counter
		movb    tx_pin,/tx_low.6        ;output next bit
		jmp	do_timers
;**************************************************************************
:receive
; This is an asynchronous receiver for RS-232 reception
; INPUTS:
;	rx_pin		   -	Pin which RS-232 is received on.
; OUTPUTS:
;	rx_byte		   -	The byte received
;	rx_flag		   -	Set when a byte is received.
;**************************************************************************
		bank	serial
		movb    c,rx_pin                ;get current rx bit
		test    rx_count                ;currently receiving byte?
		jnz     :rxbit                  ;if so, jump ahead
		mov     w,#9                    ;in case start, ready 9 bits
		sc                              ;skip ahead if not start bit
		mov     rx_count,w              ;it is, so renew bit count
		mov     rx_divide,#start_delay  ;ready 1.5 bit periods
:rxbit		djnz    rx_divide,:rxdone       ;middle of next bit?
		setb    rx_divide.baud_bit      ;yes, ready 1 bit period
		dec     rx_count                ;last bit?
		sz                              ;if not
		rr      rx_byte                 ;  then save bit
		snz                             ;if so
		setb    rx_flag                 ;  then set flag
:rxdone

;**************************************************************************
do_timers
; The 24-bit timer increments every 3.26us.
;**************************************************************************
		bank	timers			; Update the timers
		inc	timer_l
		snz
		inc	timer_h
		snz
		setb	timer_flag
		snz
		inc	timer_hh
		setb	led_pin
		sb	timer_h.6
		clrb	led_pin
;******************************************************************************
:ISR_DONE
; This is the end of the interrupt service routine.  Now load 163 into w and
; perform a retiw to interrupt 163 cycles from the start of this one.  
; (3.26us@50MHz)
;******************************************************************************
		mov	w,#-163		;1	; interrupt 163 cycles after this interrupt
		retiw			;3	; return from the interrupt
;******************************************************************************
; End of the Interrupt Service Routine
;******************************************************************************

;**************************************************************************
time_n_ticks
; This subroutine times 'w' ticks, and returns with a '1' in w when 
; the specified time has timed out.  Each tick is 213.647 ms.
; This subroutine uses the TEMP register
;**************************************************************************
	bank	timers
	test	wreg
	jz	:check_time
	clc
	add	w,timer_hh
	mov	temp,w
	retw	0
:check_time
	mov	w,temp
	xor	w,timer_hh
	sz	
	retw	0
	retw	1
;******************************************************************************
reset_entry
; Program Starts Here on Power Up
;******************************************************************************

	;**********************************************************************
	; First, call init to initialize the program
	;**********************************************************************
		call	@init

		mov	!option,#%00011111	; enable wreg and rtcc interrupt
		setb	tx_pin
		mov	w,#255
		call	@delay_n_ms

	;**********************************************************************
	; Send "hello" string
	;**********************************************************************
		mov	w,#_hello
		call	@send_string
		mov	w,#_help
		call	@send_string

	;**********************************************************************
	; Send prompt
	;**********************************************************************
main_2
_send_prompt	mov	w,#_prompt			; send prompt
		call	@send_string

	;**********************************************************************
	; Fill the command buffer with input characters.  Backspace will delete
	; the last value entered.  
	;**********************************************************************
_cmd_loop
		jnb	rx_flag,$
		clrb	rx_flag
		bank	serial
		mov	byte,rx_byte
		call	@uppercase			; convert it to uppercase
		stc
		cje	byte,#$20,_cmd_loop		; if it equals a space, ignore it.
		stc
		cje	byte,#$0d,:enter		; if it equals a carriage return, parse the string.
		mov	w,byte				; if it does not resemble the above characters, echo it.
		call	@send_byte
		stc
		cje	byte,#$08,:backspace		; if it equals a backspace, delete one character in the buffer.
		call	@buffer_push			; otherwise, store it
		jmp	_cmd_loop			; and come back for more.
:backspace
		call	@buffer_backspace
		jmp	_cmd_loop

:enter							; If the user presses enter, then parse the string.


	;**************************************************************************
	; String parser (Checks to see if buffer = any commands)
	; -Checks contents of ascii buffer against any commands stored in ROM
	; -If a command = the contents of the ascii buffer, a routine will be called
	; -Each routine MUST perform a retw 0 on exit, or parse_string will not 
	;  know that a routine has run and it should exit back to command mode.
	; -Exits back to command mode when it detects a zero after the table look-up.
	; -Outputs 'OK' if no commands are matched.
	;**************************************************************************
parse_string
		clr	ascii_index			; Clear the index into the ascii buffer
		clr	command_index			; And the index into the commands
		
:loop		call	@buffer_get			; Get a vale from the buffer at ascii_index
		call	command_table			; Get a character from one of the commands
		test	wreg				; If the return value is 0, then this matched
		jz	:nothing			; the command and ran a routine.  Exit.
		bank	serial				
		xor	w,byte				; compare the command's character with the 
		jnz	:not_equal			; buffer's character.
		call	@inc_ascii_index		; Increment the index into the buffer.
		jmp	:loop
:not_equal
		inc	command_index			; If the buffer did not equal the command,
		clr	ascii_index			; start from the beginning of a new command 
		stc
		cjne	command_index,#6,:loop		; and the buffer.  (This number = # of commands)
:nothing	mov	w,#_CR
		call	@send_string
		mov	w,#_OK				; If we have checked all 4 commands, then this
		call	@send_string			; did not equal any so send an 'OK' message.
:done
		bank	ascii_buffer
		clr	ascii_index
		clr	ascii_buffer
		jmp	_send_prompt

;**************************************************************************
command_table
		mov	w,command_index
		clc
		add	pc,w
		jmp	command_1
		jmp	command_2
		jmp	command_3
		jmp	command_4
		jmp	command_5
		jmp	command_6
;**************************************************************************
command_1					; Dial command
		mov	w,ascii_index
		add	PC,w
		retw	'A'
		retw	'T'
		retw	'D'
		retw	'T'
		jmp	DIAL_MODE
;**************************************************************************
command_2					; Hang up command
		mov	w,ascii_index
		add	PC,w
		retw	'A'
		retw	'T'
		retw	'H'
		jmp	HANG_UP
;**************************************************************************
command_3					; Initialize
		mov	w,ascii_index
		add	PC,w
		retw	'A'
		retw	'T'
		retw	'Z'
		jmp	INITIALIZE
;**************************************************************************
command_4					; Answer/ Auto answer
		mov	w,ascii_index
		add	PC,w
		retw	'A'
		retw	'T'
		retw	'A'
		jmp	AUTO_ANSWER
;**************************************************************************
command_5					; Data mode
		mov	w,ascii_index
		add	PC,w
		retw	'A'
		retw	'T'
		retw	'O'
		jmp	FSK_IO
;**************************************************************************
command_6					; Help
		mov	w,ascii_index
		add	PC,w
		retw	'?'
		jmp	HELP
;**************************************************************************
; END of String parser (Checks to see if buffer = any commands)
;**************************************************************************
	;**********************************************************************
	; Hang Up
	;**********************************************************************
HANG_UP
		clrb	sine_gen_en
		clrb	dtmf_gen_en
		clrb	fsk_tx_en
		setb	hook
		retw	0
	;**********************************************************************
	; Initialize
	;**********************************************************************
INITIALIZE
		call	@init
		clr	flags
		retw	0
	;**********************************************************************
	; Answer
	;**********************************************************************
AUTO_ANSWER
		jmp	Answer
		retw	0
	;**********************************************************************
	; Send Help string
	;**********************************************************************
HELP		mov	w,#_HELP
		call	@send_string
		retw	0
				
	;**************************************************************************
	; Dial Mode:
	; -Dials contents of ascii buffer, starting from location pointed
	;  to by ascii_index.
	; -Responds to these commands:
	; 	0-9, *, #	- Dials the specified number
	;	,		- Pause for 2 seconds
	; -Jumps to data mode after dialing.
	;**************************************************************************
DIAL_MODE
		clrb	sine_gen_en
		clrb	fsk_tx_en
		clrb	dtmf_gen_en
		clrb	cntrl_1
		setb	cntrl_3
		clrb	gain_booster			; boost the gain

		mov	w,#_CR
		call	@send_string
		mov	w,#_DIALING			; send Dialing
		call	@send_string
		clrb	hook
		mov	w,#255
		call	@delay_10n_ms
		bank	serial

:dial_loop	call	@buffer_get			; wait for an input character
		call	@uppercase			; convert it to uppercase
		mov	w,byte
		snz
		jmp	:originate_mode
		call	@send_byte
		cje	byte,#',',:pause		; if the character = ',', pause for 2s
		call	@digit_2_index			; convert the ascii digit to an 
							; index value
		call	@load_frequencies		; load the frequency registers
		call	@dial_it			; dial the number for 60ms and return.
:inc		call	@inc_ascii_index		; increment the index into the table
		jmp	:dial_loop
:pause
		mov	w,#201				; delay 2s
		call	@delay_10n_ms
		jmp	:inc


:originate_mode
	;******************************************************************
	; Set/clear proper flags for origination
	;******************************************************************
		clr	flags
		bank	fsk_transmit_bank
		clrb	fsk_answering
		setb	fsk_tx_bit
		setb	sine_gen_en
		setb	fsk_tx_en
		jmp	FSK_IO

Answer
		clrb	hook				; Go off-hook
		setb	cntrl_1				; Switch on the proper filters for answering
		clrb	cntrl_3				; (low-pass on RX, high-pass on TX)
		clrb	gain_booster			; Give a gain boost
		call	@answer_tone			; Send out the answer tone for 3 seconds
		bank	fsk_transmit_bank		; Clear all the flags
		clr	flags
		setb	fsk_answering			; enable answering frequencies
		setb	fsk_tx_bit			; Set the tx_bit to output a high frequency
		setb	fsk_tx_en			; enable FSK transmit
		setb	sine_gen_en			; enable sine generation
		mov	w,#255
		call	@delay_10n_ms
		mov	w,#255
		call	@delay_10n_ms

FSK_IO


		mov	w,#_DATA_MODE
		call	@send_string
		mov	w,#_prompt
		call	@send_string
		clr	plus_count
:loop2
		bank	fsk_transmit_bank
		movb	fsk_tx_bit,rx_pin	; move the rs-232 pin to the fsk_tx_bit
		movb	tx_pin,fsk_rx_bit	; and move the fsk_rx_bit to the rs-232 pin
		jb	rx_flag,:check_for_plus
		jmp	:loop2			; jump here forever (ISR does all the work)
:check_for_plus
		bank	serial
		clrb	rx_flag
		inc	plus_count
		mov	w,#'+'
		xor	w,rx_byte
		sz
		clr	plus_count
		mov	w,#3
		xor	w,plus_count
		snz
		retw	0
		jmp	:loop2

org	$200

;**************************************************************************
FSK_RECEIVE	; There is no FSK receive code in bell_103_tx_2_00
;**************************************************************************
		bank	fsk_receive_bank	; switch to fsk_receive_bank of RAM
		setb	fsk_rx_bit
		retp
		
;**************************************************************************
TRANSMIT_FSK
;**************************************************************************
		bank	fsk_transmit_bank
		jb	fsk_answering,transmit_answer_tones
transmit_originate_tones
		jnb	fsk_tx_bit,:low_freq
:high_freq
		bank	sine_gen_bank
		mov	freq_count_high2,#f1270_h
		mov	freq_count_low2,#f1270_l
		retp
:low_freq	
		bank	sine_gen_bank
		mov	freq_count_high2,#f1070_h
		mov	freq_count_low2,#f1070_l
		retp
transmit_answer_tones
		jnb	fsk_tx_bit,:low_freq
:high_freq
		bank	sine_gen_bank
		mov	freq_count_high2,#f2225_h
		mov	freq_count_low2,#f2225_l
		retp
:low_freq	
		bank	sine_gen_bank
		mov	freq_count_high2,#f2025_h
		mov	freq_count_low2,#f2025_l
		retp
;**************************************************************************
answer_tone
;**************************************************************************
		bank	sine_gen_bank		; send out the answer tone for 3 seconds
		clr	curr_sine
		mov	freq_count_high2,#f2100_h 
		mov	freq_count_low2,#f2100_l
		setb	sine_gen_en		; enable the FSK transmitter
		mov	w,#255
		call	@delay_10n_ms
		mov	w,#45
		call	@delay_10n_ms
		retp
;**************************************************************************
org	$300
;**************************************************************************
; String data (for RS-232 output) and tables
;**************************************************************************
_hello          dw      13,10,'Bell 103 Transmit V.2.0',13,10,0
_instructions	dw	'- ? For Help',0
_DIALING	dw	'DIAL ',0
_PROMPT		dw	13,10,'>',0
_OK		dw	'OK',13,10,0
_CR		dw	13,10,0
_DATA_MODE	dw	13,10,'CONNECT 300',0
_no_carrier	dw	13,10,'NO CARRIER',0
_HELP		dw	13,10,'ATDT- Dial',13,10,'ATA - Answer',13,10,'ATH - Hang Up',13,10,'ATO - Data Mode',13,10,'ATZ - Init',13,10,'+++ - Command Mode',0

org	$400	; Miscellaneous subroutines
;**************************************************************************
buffer_push
; This subroutine pushes the contents of byte onto the 32-byte ascii buffer. 
;**************************************************************************
	bank	serial			; Move the byte into the buffer
	mov	temp,byte
	mov	fsr,#ascii_buffer
	clc
	add	fsr,ascii_index
	mov	indf,temp
					; Increment index and keep it in range
	call	@inc_ascii_index
	mov	fsr,#ascii_buffer	; Null terminate the buffer.
	clc
	add	fsr,ascii_index
	clr	indf
	bank	serial
	retp
;**************************************************************************
;**************************************************************************
buffer_backspace
; This subroutine deletes one value of the buffer and decrements the index 
;**************************************************************************
	dec	ascii_index
	and	ascii_index,#%01101111

	mov	fsr,#ascii_buffer
	clc
	add	fsr,ascii_index
	clr	indf
	bank	serial
	retp
;**************************************************************************
inc_ascii_index
; This subroutine increments the index into the buffer
;**************************************************************************
	mov	w,ascii_index
	and	w,#%00001111
	xor	w,#%00001111
	jnz	:not_on_verge
	inc	ascii_index
	mov	w,#16
	clc
	add	w,ascii_index
	and	w,#$7f
	mov	ascii_index,w
	retp
:not_on_verge
	inc	ascii_index
	retp
;**************************************************************************
buffer_get
; This subroutine retrieves the buffered value at index
;**************************************************************************
	mov	fsr,#ascii_buffer
	clc
	add	fsr,ascii_index
	mov	w,indf
	bank	serial
	mov	byte,w
	
	retp
;**************************************************************************
delay_10n_ms
; This subroutine delays 'w'*10 milliseconds. 
; This subroutine uses the TEMP register
; INPUT		w	-	# of milliseconds to delay for.
; OUTPUT	Returns after 10 * n milliseconds.
;**************************************************************************
	mov	temp,w
	bank	timers
:loop	clrb	timer_flag	; This loop delays for 10ms
	mov	timer_h,#$0f4
	mov	timer_l,#$004
	jnb	timer_flag,$
	dec	temp		; do it w-1 times.
	jnz	:loop
	clrb	timer_flag
	retp
;**************************************************************************
delay_n_ms
; This subroutine delays 'w' milliseconds. 
; This subroutine uses the TEMP register
; INPUT		w	-	# of milliseconds to delay for.
; OUTPUT	Returns after n milliseconds.
;**************************************************************************
	mov	temp,w
	bank	timers
:loop	clrb	timer_flag	; This loop delays for 1ms
	mov	timer_h,#$0fe
	mov	timer_l,#$0cd
	jnb	timer_flag,$
	dec	temp		; do it w-1 times.
	jnz	:loop
	clrb	timer_flag
	retp
;**************************************************************************
zero_ram
; Subroutine - Zero all ram.
; INPUTS:	None
; OUTPUTS:	All ram locations (except special function registers) are = 0
;**************************************************************************
		CLR	FSR
:loop	    	SB      FSR.4                   ;are we on low half of bank?
		SETB    FSR.3                   ;If so, don't touch regs 0-7
		CLR     IND                     ;clear using indirect addressing
		IJNZ    FSR,:loop	        ;repeat until done
		retp
;**************************************************************************
init
;**************************************************************************
		mov	m,#$0d			; Enable CMOS inputs
		mov	!ra,#$00
		mov	!rb,#$00
		mov	!rc,#$00
		mov	m,#$0c			; Enable Schmidt triggers
		mov	m,#$0f			
		mov	 ra,#%0110		; init ra
		mov	!ra,#%0010		; ra0-1 = input, ra2-3 = output
		mov	 rb,#%00000000		; init rb
		mov	!rb,#%11001010		; rb1 = FSK input, rb0 = output for LED,rb5 = hook
		mov	!rc,#%01111111		; rb1 = FSK input, rb0 = output for LED,rb5 = hook
		setb	hook			; go on hook.
		setb	led_pin			; turn on LED
		clr	flags			; Clear all flags
		call	zero_ram
		retp
;**************************************************************************
; Subroutine - Get byte via serial port and echo it back to the serial port
; INPUTS:
;	-NONE
; OUTPUTS:
;	-received byte in rx_byte
;**************************************************************************
get_byte     	jnb     rx_flag,$		;wait till byte is received
		clrb    rx_flag		;reset the receive flag
		bank	serial
		mov     byte,rx_byte		;store byte (copy using W)
						; & fall through to echo char back
;**************************************************************************
; Subroutine - Send byte via serial port
; INPUTS:
;	w 	-	The byte to be sent via RS-232
;**************************************************************************
send_byte    	bank    serial

:wait        	test    tx_count                ;wait for not busy
		jnz     :wait                   ;

		not     w                       ;ready bits (inverse logic)
		mov     tx_high,w               ; store data byte
		setb    tx_low.7                ; set up start bit
		mov     tx_count,#10            ;1 start + 8 data + 1 stop bit
		RETP                            ;leave and fix page bits

;**************************************************************************
; Subroutine - Send string pointed to by address in W register
; INPUTS:
;	w	-	The address of a null-terminated string in program
;			memory
; OUTPUTS:
; 	outputs the string via. RS-232
;**************************************************************************
send_string	bank	serial
 		mov     string,w                ;store string address
:loop        	mov     w,string                ;read next string character
		mov     m,#3                    ; with indirect addressing
		iread                           ; using the mode register
		mov     m,#$F                   ;reset the mode register
		test    w                       ;are we at the last char?
		snz                             ;if not=0, skip ahead
		RETP                            ;yes, leave & fix page bits
		call    send_byte               ;not 0, so send character
		inc     string                  ;point to next character
		jmp     :loop                   ;loop until done

;**************************************************************************
; Subroutine - Make byte uppercase
; INPUTS:
;	byte	-	The byte to be converted
; OUTPUTS:
;	byte	-	The uppercase byte
;**************************************************************************
uppercase    	stc
		csae	  byte,#'a'            	;if byte is lowercase, then skip ahead
		RETP
		stc
		sub     byte,#'a'-'A'           ;change byte to uppercase
		RETP                            ;leave and fix page bits
;**************************************************************************
; Subroutine - Disable the outputs
; Load DC value into PWM and disable the output switch.
;**************************************************************************
disable_o
		bank	PWM_bank	; input mode.
		mov	pwm0_out,#128	; put 2.5V DC on PWM output pin
		retp
;**************************************************************************
org	$600			; These subroutines are on page 3.
;**************************************************************************
; DTMF transmit functions/subroutines
;**************************************************************************
;**************************************************************************
DTMF_TABLE	; DTMF tone constants
; This routine returns with the constant used for each of the frequency
; detectors.
; INPUT:	w	-	Index into the table (0-15 value)
; OUTPUT:	w	-	Constant at that index
;**************************************************************************
		clc
		jmp	PC+w
		retw	f697_l
		retw	f697_h			
		retw	f770_l
		retw	f770_h
		retw	f852_l
		retw	f852_h	
		retw	f941_l
		retw	f941_h
		retw	f1209_l
		retw	f1209_h
		retw	f1336_l
		retw	f1336_h
		retw	f1477_l
		retw	f1477_h
		retw	f1633_l
		retw	f1633_h
;**************************************************************************
ASCII_TABLE	; Ascii value at index (0-15)
; INPUT:	w	-	Index into the table (0-15 value)
; OUTPUT:	w	-	Constant at that index
;**************************************************************************
		clc
		jmp	PC+w
		retw	'1'
		retw	'2'			
		retw	'3'
		retw	'A'
		retw	'4'
		retw	'5'	
		retw	'6'
		retw	'B'
		retw	'7'
		retw	'8'
		retw	'9'
		retw	'C'
		retw	'*'
		retw	'0'
		retw	'#'
		retw	'D'
;**************************************************************************
index_2_digit
; This subroutine converts a digit from 0-9 or a '*' or a '#' to a table 
; lookup index which can be used by the load_frequencies subroutine.  To use
; this routine, pass it a value in the 'byte' register.  No invalid digits
; are used. (A, B, C, or D)
;**************************************************************************
		call	ASCII_TABLE
		retp
;**************************************************************************
digit_2_index
; This subroutine converts a digit from 0-9 or a '*' or a '#' to a table 
; lookup index which can be used by the load_frequencies subroutine.  To use
; this routine, pass it a value in the 'byte' register.  No invalid digits
; are used. (A, B, C, or D)
;**************************************************************************
		bank	serial
		clr	temp
:loop
		mov	w,temp
		call	ASCII_TABLE
		xor	w,byte
		jz	:done
		inc	temp
		jb	temp.4,:done
		jmp	:loop

:done		mov	w,temp
		retp
		
;**************************************************************************
load_frequencies
; This subroutine loads the frequencies using a table lookup approach.
; The index into the table is passed in the byte register.  The DTMF table
; must be in the range of $400 to $500.
;**************************************************************************
		mov	temp,w
		bank	sine_gen_bank

		mov	w,>>temp
		and	w,#%00000110
		call	DTMF_TABLE
		mov	freq_count_low,w

		mov	w,>>temp
		and	w,#%00000110
		inc	wreg
		call	DTMF_TABLE
		mov	freq_count_high,w

		rl	temp
		setb	temp.3
		mov	w,temp
		and	w,#%00001110
		mov	temp,w
		call	DTMF_TABLE
		mov	freq_count_low2,w

		mov	w,temp
		inc	wreg
		call	DTMF_TABLE
		mov	freq_count_high2,w
		retp		
		
;**************************************************************************
dial_it		; This subroutine puts out whatever frequencies were loaded
		; for 100ms, and then stops outputting the frequencies.
;**************************************************************************
		bank	sine_gen_bank
		clr	sine_index
		clr	sine_index2
		enable_o 			; enable the output
		mov	w,#15
		call	@delay_10n_ms		; delay 30ms
		setb	dtmf_gen_en
		mov	w,#15
		call	@delay_10n_ms		; delay 100ms
		clrb	dtmf_gen_en
		call	@disable_o		; now disable the outputs
:end_dial_it	retp
;**************************************************************************
sine_generator1				;(Part of interrupt service routine)
; This routine generates a synthetic sine wave with values ranging
; from -32 to 32.  Frequency is specified by the counter.  To set the
; frequency, put this value into the 16-bit freq_count register:
; freq_count = FREQUENCY * 6.83671552 (@50MHz)
;**************************************************************************
		bank	sine_gen_bank
		
		clc
		add	freq_acc_low,freq_count_low
		add	freq_acc_high,freq_count_high
		sc
		jmp	:no_change
		inc	sine_index
		mov	w,sine_index
		and	w,#$1f
		call	sine_table
	
		mov	curr_sine,w		;1		; add the velocity to sin


:no_change

;**************************************************************************
sine_generator2						;(Part of interrupt service routine)
; This routine generates a synthetic sine wave with values ranging
; from -32 to 32.  Frequency is specified by the counter.  To set the
; frequency, put this value into the 16-bit freq_count register:
; freq_count = FREQUENCY * 6.83671552 (@50MHz)
;**************************************************************************
		bank	sine_gen_bank
		clc
		add	freq_acc_low2,freq_count_low2
		add	freq_acc_high2,freq_count_high2
		sc
		jmp	:no_change
		inc	sine_index2
		mov	w,sine_index2
		and	w,#$1f
		call	sine_table
		mov	curr_sine2,w
:no_change
		retp
;**************************************************************************
SINE_out
; This subroutine moves the FSK output to the PWM register
;**************************************************************************
		bank	sine_gen_bank
		clc
		mov	w,#127
		add	w,curr_sine2
		mov	pwm0_out,w
		retp
;**************************************************************************
DTMF_twist
; This subroutine adds twist to the high frequency of the DTMF output.
;**************************************************************************
		bank	sine_gen_bank
		mov	pwm0_out,curr_sine2			; mov sin2 into pwm0
		rr	wreg
		rr	wreg
		and	w,#$3f
		snb	wreg.5
		or	w,#$C0
		clc
		add	pwm0_out,w				; (1.25)(sin2) = sin2 + (0.25)(sin2)
		clc
		add	pwm0_out,curr_sine			; add the value of SIN into the PWM output
		clc
		add	pwm0_out,#128			; for result = pwm0 = 1.25*sin2 + 1*sin
		retp					; return with page bits intact
;******************************************************************************
sine_table
; The values in this table can be changed to increase/decrease the amplitude of
; the output sine wave.
;******************************************************************************
	clc
	jmp	pc+w
	retw	0
	retw	6
	retw	12
	retw	17
	retw	22
	retw	26
	retw	29
	retw	30
	retw	31
	retw	30
	retw	29
	retw	26
	retw	22
	retw	17
	retw	12
	retw	6
	retw	0
	retw	-6
	retw	-12
	retw	-17
	retw	-22
	retw	-26
	retw	-29
	retw	-30
	retw	-31
	retw	-30
	retw	-29
	retw	-26
	retw	-22
	retw	-17
	retw	-12
	retw	-6
;**************************************************************************
;******************************************************************************
;        Copyright © 1998 Scenix Semiconductor, Inc. All rights
;        reserved.
;        
;        Scenix Semiconductor, Inc. assumes no responsibility or liability for
;        the use of this [product, application, software, any of these products].
;        
;        Scenix Semiconductor conveys no license, implicitly or otherwise, under
;        any intellectual property rights.
;        Information contained in this publication regarding (e.g.: application,
;        implementation) and the like is intended through suggestion only and may
;        be superseded by updates. Scenix Semiconductor makes no representation
;        or warranties with respect to the accuracy or use of these information,
;        or infringement of patents arising from such use or otherwise.
;        
;        Scenix Semiconductor products are not authorized for use in life support
;        systems or under conditions where failure of the product would endanger
;        the life or safety of the user, except when prior written approval is
;        obtained from Scenix Semiconductor.
;******************************************************************************
